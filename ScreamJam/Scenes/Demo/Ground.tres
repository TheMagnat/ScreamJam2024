[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://due1qktvfeg1"]

[sub_resource type="Shader" id="Shader_2ob4h"]
code = "shader_type spatial;

global uniform float sanity;

uniform sampler2D noise;

varying vec3 world_position;

float f(sampler2D n, float t, vec2 uv, float offset, float jitter) {
	return texture(n, (1.0 + cos(vec2(offset, 0.0) + vec2(0.0, t + float(int((t + offset) * jitter)) * 0.25) * 0.005 + vec2(abs(uv.x * 0.5 - 0.25), 0.0))) * 0.5).r < uv.y * 0.9 ? 0.25 : 0.0;
}

void vertex() {
	
	float time = TIME * 0.005;
	
	world_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
	// Cool
	vec2 uv = vec2(world_position.x + world_position.y, world_position.z) * 0.25;
	float noiseValue = texture(noise, uv + time).r;
	
	VERTEX += NORMAL * noiseValue * (0.1 + sanity * 3.0);
	
	float randValue = texture(noise, vec2(world_position.x, world_position.z + world_position.y) + time).r;
	
	//VERTEX += randValue * sanity;
	
	// Cool 2
	//vec2 uv = vec2(world_position.x + world_position.y, world_position.z) * 0.005;
	//float noiseValue = texture(noise, uv + time).r;
	//VERTEX += NORMAL * noiseValue * 2.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_0x15b"]
noise_type = 4
frequency = 0.0405

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_fpygc"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_0x15b")

[resource]
render_priority = 0
shader = SubResource("Shader_2ob4h")
shader_parameter/noise = SubResource("NoiseTexture2D_fpygc")
